package com.webapp.dqsys.mngr.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections4.MapUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.webapp.dqsys.mngr.domain.SangsMap;
import com.webapp.dqsys.mngr.service.DataStandardService;
import com.webapp.dqsys.mngr.service.DiagnosisService;
import com.webapp.dqsys.mngr.service.RuleMngService;
import com.webapp.dqsys.util.SangsUtil;

/**
 * @author user
 *
 */
@Controller
public class DataStandardController {

	@Autowired
	DataStandardService dataStandardService;

	@Resource
	private RuleMngService ruleMngService;

	@Resource
	private DiagnosisService diagnosisService;

	/**
	 * 분석결과 보기 페이지당 리스트 건수
	 */
	@Value("${analysis.view.listCnt}")
	private int viewListCnt;

	/**
	 * 표준화 항목 관리 페이지 이동
	 * 
	 * @param params
	 * @param req
	 * @param res
	 * @param model
	 * @return
	 */
	@RequestMapping("/mngr/dataStandard/standardItemManage.do")
	public String dataStandardManage(@RequestParam Map<String, String> params, HttpServletRequest req,
			HttpServletResponse res, ModelMap model) throws Exception {
		return "mngr/dataStandard/standard_item_manage";
	}

	/**
	 * 표준화 항목 관리 목록 조회
	 * 
	 * @param params
	 * @param req
	 * @param res
	 * @param model
	 * @return
	 */
	@RequestMapping("/mngr/dataStandard/selectStandardItemManageList")
	public void selectDataStandardManageList(@RequestParam Map<String, String> params, HttpServletRequest req,
			HttpServletResponse res, ModelMap model) throws Exception {
		dataStandardService.selectDataStandardManageList(params, res);
	}

	/**
	 * 도메인 insert 호출
	 * 
	 * @param model
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/mngr/dataStandard/saveDomainInfo")
	public void saveDomainInfo(@RequestParam Map<String, String> params, Model model, HttpServletRequest req,
			HttpServletResponse res) throws Exception {
		dataStandardService.saveDomainInfo(params, req, res);
	}

	/**
	 * 도메인 CSV insert 호출
	 * 
	 * @param model
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/mngr/dataStandard/saveDomainCsv")
	public void saveDomainCsv(@RequestParam Map<String, String> params, Model model, HttpServletRequest req,
			HttpServletResponse res) throws Exception {
		dataStandardService.saveDomainCsv(params, req, res);
	}

	/**
	 * 표준 용어 insert 호출
	 * 
	 * @param model
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/mngr/dataStandard/saveWordInfo")
	public void saveWordInfo(@RequestParam Map<String, String> params, Model model, HttpServletRequest req,
			HttpServletResponse res) throws Exception {
		dataStandardService.saveWordInfo(params, req, res);
	}

	/**
	 * 표준 용어 CSV insert 호출
	 * 
	 * @param model
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/mngr/dataStandard/saveWordCsv")
	public void saveWordCsv(@RequestParam Map<String, String> params, Model model, HttpServletRequest req,
			HttpServletResponse res) throws Exception {
		dataStandardService.saveWordCsv(params, req, res);
	}

	/**
	 * 표준화 분석 페이지 이동
	 * 
	 * @param params
	 * @param req
	 * @param res
	 * @param model
	 * @return
	 */
	@RequestMapping("/mngr/dataStandard/standardAnalysis.do")
	public String dataStandardAnalysis(@RequestParam Map<String, String> params, HttpServletRequest req,
			HttpServletResponse res, ModelMap model) throws Exception {

		String dbmsId = (String) req.getSession().getAttribute("DDId");

		try {
			// 접속 정보 조회
			Map<String, String> connData = ruleMngService.selectConnDbmsType(dbmsId);

			if ("CSV".equals(connData.get("connType"))) {
				model.addAttribute("connData", connData);
			} else {
				model.addAttribute("schema", connData.get("database"));
			}
		} catch (Exception e) {
			e.getStackTrace();
		}

		return "mngr/dataStandard/standard_analysis";
	}

	/**
	 * 표준화 분석 결과 페이지 이동
	 * 
	 * @param params
	 * @param req
	 * @param res
	 * @param model
	 * @return
	 */
	@RequestMapping("/mngr/dataStandard/standardAnalysisResult.do")
	public String dataStandardAnalysisResult(@RequestParam Map<String, String> params, HttpServletRequest req,
			HttpServletResponse res, ModelMap model) throws Exception {
		return "mngr/dataStandard/standard_analysis_result";
	}

	/**
	 * @param model
	 * @param paramMap
	 * @return
	 */
	@RequestMapping("/mngr/dataStandard/standardAnalysisResultView.do")
	public String dataStandardAnalysisResultView(Model model, @RequestParam Map<String, Object> paramMap)
			throws Exception {
		int listCntPerPage = viewListCnt;
		if (listCntPerPage <= 0) {
			listCntPerPage = 1;
		}
		paramMap.put("insttCode", SangsUtil.getInsttCode());
		Map<String, String> data = new HashMap<String, String>();
		// 진단대상 DBMS 정보 조회
		data.put("dgnssDbmsId", paramMap.get("dgnssDbmsId").toString());
		data = ruleMngService.selectDgnssDbmsInfo(data);
		paramMap.putAll(data);
		// 대상 DBMS 정보 조회
		model.addAttribute("dbms", diagnosisService.selectDgnssDbms(paramMap));
		// 진단 테이블 정보 조회
		SangsMap tableMap = diagnosisService.selectDgnssTable(paramMap);
		model.addAttribute("table", tableMap);
		/*
		 * List<SangsMap> columnList = diagnosisService.selectDgnssColumnList(paramMap);
		 * List<List<SangsMap>> columnResList = new ArrayList<>(columnList.size());
		 * List<List<SangsMap>> frqAnalList = new ArrayList<>(columnList.size());
		 * paramMap.put("rowCount", tableMap.get("allCo"));
		 * 
		 * for (SangsMap columnMap : columnList) { paramMap.put("columnNm",
		 * columnMap.get("columnNm"));
		 * columnResList.add(diagnosisService.selectDgnssColumnResList(paramMap));
		 * frqAnalList.add(diagnosisService.selectFrqAnalList(paramMap)); }
		 */

		// 페이징 처리로 컬럼 단위로 하나씩 끊음
		List<SangsMap> columnList = diagnosisService.selectDgnssColumnList(paramMap);
		List<Object> columnListAll = new ArrayList<>();
		List<Object> frqListAll = new ArrayList<>();
		List<Object> columnCmt = new ArrayList<>();

		Map<String, Object> bodyMap = new HashMap<String, Object>();
		Map<String, Object> frqlList = new HashMap<String, Object>();

		diagnosisService.pagingSetMySql(paramMap);

		int pageIdx = MapUtils.getIntValue(paramMap, "pageIndex", 1);

		if (pageIdx > columnList.size()) {
			pageIdx = 1;
		}

		SangsMap columnMap = null;

		List<SangsMap> columnData = new ArrayList<>();

		for (int i = (pageIdx - 1) * listCntPerPage; i < (pageIdx * listCntPerPage); i++) {

			if (columnList.size() > i) {

				List<SangsMap> columnResList = new ArrayList<>();
				List<SangsMap> frqAnalList = new ArrayList<>();
				String cmt;
				columnMap = columnList.get(i);

				columnData.add(columnList.get(i));

				paramMap.put("rowCount", tableMap.get("allCo"));
				paramMap.put("columnNm", columnMap.get("columnNm"));
				// 컬럼별 진단 결과0111
				columnResList = diagnosisService.selectDgnssColumnResList(paramMap);
				// 분석 구분 목록
				frqAnalList = diagnosisService.selectFrqAnalList(paramMap);

				columnListAll.add(columnResList);
				frqListAll.add(frqAnalList);

				if ("CSV".equals(data.get("dbmsKnd").toString())) {
					paramMap.put("tableName", tableMap.get("tableNm"));
					paramMap.put("columnName", columnMap.get("columnNm")); // 컬럼별 코멘트 정보
					cmt = diagnosisService.selectColumnComment(paramMap);
					columnCmt.add(cmt);
				}
			}
		}

		bodyMap.put("body", columnListAll);
		frqlList.put("frqAnalList", frqListAll);

		model.addAttribute("bodyMap", bodyMap);
		model.addAttribute("columnData", columnData);
		model.addAttribute("columnList", columnList);
		model.addAttribute("column", columnMap);
		model.addAttribute("groupList", diagnosisService.selectAnalsGroupList(paramMap));
		model.addAttribute("frqlList", frqlList);
		model.addAttribute("columnCmt", columnCmt);
		model.addAttribute("listCntPerPage", listCntPerPage);
		boolean csvAt = false;
		if ("CSV".equals(data.get("dbmsKnd").toString())) {
			csvAt = true;
		} else {
			csvAt = false;
		}

		model.addAttribute("csvAt", csvAt);

		return "mngr/dataStandard/standard_analysis_result_view";
	}
}