package com.webapp.dqsys.mngr.interceptor;

import java.util.Enumeration;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.MultipartRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.webapp.dqsys.mngr.mapper.UserMapper;
import com.webapp.dqsys.security.domain.Member;
import com.webapp.dqsys.util.SangsUtil;

/**
 * 필요 없으면 지워도 됩니다. 
 * @author gtman5
 *
 */
@Component
public class DebugInterceptor extends HandlerInterceptorAdapter {

	protected Logger log = LoggerFactory.getLogger(this.getClass());

	@Autowired
    UserMapper userMapper;
    
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
		HttpSession session = request.getSession();
		Member member = (Member) session.getAttribute("member");
		try {
			if(member == null) {
				String userId = SangsUtil.getUserName();
				member = userMapper.readUser(userId);
				session.setAttribute("member", member);
				
			}
		} catch (Exception e) {
			log.debug("session Exception: ", e.toString());
			// TODO: handle exception
		}
		
        if (!StringUtils.isEmpty(request.getParameter("link"))) {
			return true;
		}

		log.trace("===== Debug Interceptor Start =====");

		log.debug("URI: {}", request.getRequestURI());

		Enumeration<String> nameEnum = request.getParameterNames();

		while (nameEnum.hasMoreElements()) {
			String name = nameEnum.nextElement();
			String[] values = request.getParameterValues(name);
			for (String value : values) {
				log.debug("Param: {}={}.", name, value);
			}
		}

		if (request instanceof MultipartRequest) {
			MultipartRequest mrequest = (MultipartHttpServletRequest)request;
			Iterator<String> fileIt = mrequest.getFileNames();

			while (fileIt.hasNext()) {
				String name = fileIt.next();
				log.debug("File: {}={}.", name, mrequest.getFile(name).getOriginalFilename());
			}
		}

		log.trace("===== Debug Interceptor End =====");

		return true;
		
	}
	
	
	@Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {

        super.postHandle(request, response, handler, modelAndView);
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {

        super.afterCompletion(request, response, handler, ex);
    }


}