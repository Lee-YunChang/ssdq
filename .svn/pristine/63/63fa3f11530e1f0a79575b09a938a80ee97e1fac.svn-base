<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.webapp.dqsys.mngr.mapper.CommonMapper">

	<select id="selectInsttCnt" resultType="int">
		SELECT 
			COUNT(*)
		FROM USER
	</select>
	
	<select id="selectInsttTotalCnt" resultType="int">
		SELECT 
			COUNT(1) AS CNT 
		FROM INSTT_MANAGE
		WHERE 1=1
		<if test="searchValue != null and searchValue != ''">
		AND INSTT_NM LIKE CONCAT('%', #{searchValue}, '%')
		</if>
	</select>
	

	<select id="selectInsttList" parameterType="map" resultType="map">
		SELECT 
			*
		FROM 
			(
			SELECT 
				INSTT_CODE AS insttCode
				, INSTT_NM AS insttNm
				, LWPRT_INSTT_NM AS lwprtInsttNm
				, ZIP AS zip
				, LNM AS lnm
				, ADRES AS adres
				, TELNO AS telno
				, FXNUM AS fxnum
				, 'Y' AS useBtn
				,  @rownum := @rownum+1 AS RNUM
			FROM 
				INSTT_MANAGE,
				(SELECT @rownum :=0) AS R
			WHERE 1=1
				<if test="searchValue != null and searchValue != ''">
				AND INSTT_NM LIKE CONCAT('%', #{searchValue}, '%')
				</if>
			) T1
		WHERE 1=1
			AND rnum BETWEEN #{start_row} AND #{end_row}
		ORDER BY insttCode
	</select>

	<insert id="insertUserInfo" parameterType="map">
		INSERT INTO USER
		(
			INSTT_CODE
			, AUTHOR_CODE 
			, USER_ID 
			, USER_PASSWORD 
			, USER_NM 
			, CHRG_DEPT
			, RECENT_CONECT_DT
			, RECENT_CONECT_IP
			, RM
			, USE_AT
		)
		VALUES
		(
			#{insttCode}
			, #{authorCode} 
			, #{userId}
			, #{userPw}
			, #{userNm} 
			, #{lwprtInsttNm}
			, now()
			, #{recentConectIp}
			, ''
			, IF(#{useAt } = 'Y', 1, 0)
		)
	</insert>
	
	<select id="selectManageInsttList" parameterType="map" resultType="map">
		SELECT 
		    INSTT_CODE AS insttCode
			, INSTT_NM AS insttNm
			, DATE_FORMAT(BSNS_BGNDE, '%Y-%m-%d') AS bsnsBgnde
   			, DATE_FORMAT(BSNS_ENDDE, '%Y-%m-%d') AS bsnsEndde
			, CONCAT(BSNS_BGNDE, ' ~ ', BSNS_ENDDE) AS bsnsDt
			, REPRSNT_TLPHON AS reprsntTlphon
			, ADRES AS adres
			, HMPG AS hmpg
			, RM AS rm
			, IF(USE_AT = true, 'Y', 'N') AS useAt
			, CHARGER_NM AS chargerNm
			, CHARGER_EMAIL AS chargerEmail
			, CHARGER_TELNO AS chargerTelno
			, CHARGER_MBTLNUM AS chargerMbtlnum
		FROM INSTT
		WHERE 1=1
			AND INSTT_CODE = #{loginInsttCode }
	</select>
	
	<insert id="insertInsttInfo" parameterType="map">
		INSERT INTO INSTT
		(
			INSTT_CODE
			, INSTT_NM
			, BSNS_BGNDE
			, BSNS_ENDDE
			, REPRSNT_TLPHON
			, HMPG
			, RM
			, USE_AT
		)
		VALUES
		(
			#{insttCode}
			, #{insttNm} 
			, ''
			, ''
			, #{telno} 
			, ''
			, ''
			, 1
		)
	</insert>
	
	<update id="updateAnalsInssttCode" parameterType="map" > 
		UPDATE ANALS SET
			INSTT_CODE = #{insttCode}
	</update>
	
	<select id="selectUserIdChk" parameterType="map" resultType="map">
		SELECT USER_ID FROM USER WHERE USER_ID = #{userId}
	</select>
	
	<select id="selectMenuList" parameterType="map" resultType="map">
		SELECT 
			T2.INQIRE_ORDR AS inqireOrdr
			, T2.MENU_SN AS menuSn
			, T2.UPPER_MENU_SN AS upperMenuSn
			, T2.MENU_DP_NO AS menuDp
			, T2.MENU_NM AS menuNm
			, T2.MENU_URL AS menuUrl
			, IF( (SELECT COUNT(*) FROM MENU_MANAGE T0 WHERE T0.USE_AT = 1 AND T0.UPPER_MENU_SN = T2.MENU_SN) = 0, 'Y', 'N') AS isLast
	        , IF(T2.USE_AT = true, 'Y', 'N') AS useAt
			, T1.MENU_GROUP_SN AS menuGroupSn
			, T1.MENU_GROUP_NM AS menuGroupNm
			, IF(T1.USE_AT = true, 'Y', 'N') AS groupUseAt
			, T2.MENU_ICON AS menuIcon
            , T3.AUTHOR_CODE 
            , T3.USE_AT
		FROM 
			MENU_GROUP T1 
	        LEFT OUTER JOIN MENU_MANAGE T2 ON T1.MENU_GROUP_SN = T2.MENU_GROUP_SN AND T2.USE_AT = 1
	        LEFT JOIN MENU_AUTHOR T3 ON T2.MENU_SN = T3.MENU_SN AND T3.AUTHOR_CODE = #{authCode }
		WHERE 1=1
			<if test="auth != 'ROLE_ADMIN'">
			AND T1.USE_AT = 1
			</if>
			AND (T3.USE_AT = 1 OR T3.USE_AT IS NULL) 
		ORDER BY CAST(T1.MENU_GROUP_SN AS UNSIGNED), CAST(T2.MENU_DP_NO AS UNSIGNED), CAST(T2.INQIRE_ORDR AS UNSIGNED)
	</select>
	
	<select id="selectUpMenuList" parameterType="map" resultType="map">
		SELECT 
			MENU_SN AS menuSn,
		    MENU_NM AS menuNm
		FROM MENU_MANAGE
		WHERE 1=1
			AND USE_AT = 1
			AND UPPER_MENU_SN = 0
			AND MENU_GROUP_SN = #{menuGroupSn }
	</select>
	
	<select id="selectMenuGroupList" parameterType="map" resultType="map">
		SELECT 
			MENU_GROUP_SN AS menuGroupSn,
		    MENU_GROUP_NM AS menuGroupNm
		FROM MENU_GROUP
		WHERE 1=1
			AND USE_AT = 1
		ORDER BY MENU_GROUP_SN
	</select>
	
	<insert id="insertGroupMenu" parameterType="map">
		<selectKey resultType="Integer" keyProperty="menuGroupSn" order="BEFORE">
			SELECT MAX(CAST(MENU_GROUP_SN AS UNSIGNED) + 1) AS menuGroupSn FROM MENU_GROUP
		</selectKey>
	
		INSERT INTO MENU_GROUP 
		(
			MENU_GROUP_SN
			, MENU_GROUP_NM
			, USE_AT
		) VALUES (
			#{menuGroupSn }
			, #{menuGroupNm }
			, IF(#{useAt } = 'Y', 1, 0)
		)
	</insert>
	
		
	<delete id="deleteGroupMenu" parameterType="map">
		DELETE FROM MENU_GROUP WHERE MENU_GROUP_SN = #{menuGroupSn }
	</delete>
	
	<delete id="deleteGroupMenuList" parameterType="map">
		DELETE FROM MENU_MANAGE WHERE MENU_GROUP_SN = #{menuGroupSn }
	</delete>
	
	<delete id="deleteMenu" parameterType="map">
		DELETE FROM MENU_MANAGE WHERE 1=1
		AND MENU_SN = #{selectTreeNode }
	</delete>
	
	
	<update id="updateGroupMenu" parameterType="map">
		UPDATE MENU_GROUP SET
			MENU_GROUP_NM = #{menuGroupNm }
		WHERE 1=1
			AND MENU_GROUP_SN = #{menuGroupSn }
	</update>
	
	<insert id="insertMenu" parameterType="map">
		<selectKey resultType="Integer" keyProperty="menuSn" order="BEFORE">
			SELECT MAX(CAST(MENU_SN AS UNSIGNED) + 1) AS menuSn FROM MENU_MANAGE 
		</selectKey>
	
		INSERT INTO MENU_MANAGE 
		(
			MENU_SN
			, MENU_DP_NO
			, INQIRE_ORDR
			, MENU_NM
			, MENU_URL
			, MENU_ICON
			, USE_AT
			, UPPER_MENU_SN
			, MENU_GROUP_SN
		) VALUES (
			#{menuSn }
			, #{menuDp }
			, #{inqireOrdr }
			, #{menuNm }
			, #{menuUrl }
			, #{menuIcon }
			, IF(#{useAt } = 'Y', 1, 0)
			, #{upperMenuSn }
			, #{menuGroupSn }
		)
	</insert>
	
	<update id="updateMenu" parameterType="map">
		UPDATE MENU_MANAGE SET
			INQIRE_ORDR = #{inqireOrdr }
			, MENU_NM = #{menuNm }
			, MENU_URL = #{menuUrl }
			, MENU_ICON = #{menuIcon }
			, USE_AT = IF(#{useAt } = 'Y', 1, 0)
		WHERE 1=1
			AND MENU_SN = #{menuSn }
	</update>
	
	<select id="selectCommonCode" parameterType="map" resultType="map">
		SELECT 
			GROUP_CODE AS groupCode
			, GROUP_CODE_NM AS groupCodeNm
			, IF(USE_AT = true, 'Y', 'N') AS useAt
		FROM 
			CMMN_CODE
		WHERE 1=1
		<if test="searchValue != 'null' || searchValue != ''">
			<if test="searchType == 'groupCode'">
			AND GROUP_CODE LIKE CONCAT('%', #{searchValue} ,'%')
			</if>
			
			<if test="searchType == 'groupCodeNm'">
			AND GROUP_CODE_NM LIKE CONCAT('%', #{searchValue} ,'%')
			</if>
		</if>
	</select>
	
	<select id="selectDetailCommonCode" parameterType="map" resultType="map">
		SELECT
			GROUP_CODE AS groupCode
			, CMMN_CODE AS cmmnCode
			, CMMN_CODE_NM AS cmmnCodeNm
			, CMMN_CODE_DC AS cmmnCodeDc
			, INQIRE_ORDR AS inqireOrdr
			, IF(USE_AT = true, 'Y', 'N') AS useAt
		FROM 	
			CMMN_CODE_DETAIL
		WHERE 1=1
			AND GROUP_CODE = #{groupCode }
		ORDER BY INQIRE_ORDR
	</select>
	
	<update id="updateCommonCode" parameterType="map">
		UPDATE CMMN_CODE SET
			GROUP_CODE_NM = #{groupCodeNm } 
			, USE_AT = IF(#{useAt } = 'Y', 1, 0)
		WHERE 1=1
			AND GROUP_CODE = #{groupCode }
	</update>
	
	<insert id="insertCommonCode" parameterType="map">
		INSERT INTO CMMN_CODE(
			GROUP_CODE
			, GROUP_CODE_NM
			, USE_AT 
		) VALUES (
			#{groupCode }
			, #{groupCodeNm }
			, IF(#{useAt } = 'Y', 1, 0)
		)
	</insert>
	
	<delete id="deleteCommonCode" parameterType="map">
		DELETE FROM CMMN_CODE 
		WHERE 1=1
			AND GROUP_CODE = #{groupCode }
	</delete>
	
	<insert id="insertDetailCommonCode" parameterType="map">
		INSERT INTO CMMN_CODE_DETAIL(
			GROUP_CODE
			, CMMN_CODE
			, CMMN_CODE_NM
			, CMMN_CODE_DC
			, CMMN_UPPER_CODE
			, INQIRE_ORDR
			, USE_AT
		) VALUES (
			#{detailGroupCode }
			, #{detailCmmnCode }
			, #{detailCmmnCodeNm }
			, #{detailCmmnCodeDc }
			, 0
			, IF(#{inqireOrdr } = '', 1, #{inqireOrdr })
			, IF(#{useAt } = 'Y', 1, 0)
		)
	 
	</insert>
	
	<update id="updateDetailCommonCode" parameterType="map">
		UPDATE CMMN_CODE_DETAIL SET
			CMMN_CODE_NM = #{detailCmmnCodeNm } 
			, CMMN_CODE_DC = #{detailCmmnCodeDc }
			, CMMN_CODE = #{detailCmmnCode }
			, INQIRE_ORDR = #{inqireOrdr }
			, USE_AT = IF(#{useAt } = 'Y', 1, 0)
		WHERE 1=1
			AND GROUP_CODE = #{detailGroupCode }
			AND CMMN_CODE = #{detailCmmnCode }
	</update>
	
	<delete id="deleteDetailCommonCode" parameterType="map">
		DELETE FROM CMMN_CODE_DETAIL 
		WHERE 1=1
			<if test="groupCode != null and groupCode != ''">
			AND GROUP_CODE = #{groupCode }
			</if>
			<if test="detailCmmnCode == null and detailCmmnCode == ''">
			AND GROUP_CODE = #{detailGroupCode }
			</if>
			<if test="detailCmmnCode != null and detailCmmnCode != ''">
			AND GROUP_CODE = #{detailGroupCode }
			AND CMMN_CODE = #{detailCmmnCode } 
			</if>
	</delete>
	
	<select id="selectCodeDoubleChk" parameterType="map" resultType="map">
		SELECT 
			T1.CODE_NM
		    , T1.GUBUN
		FROM ( 
				SELECT GROUP_CODE AS CODE_NM, 'G' AS GUBUN FROM CMMN_CODE
		        UNION ALL 
		        SELECT CMMN_CODE AS CODE_NM, 'D' AS GUBUN FROM CMMN_CODE_DETAIL
			) T1
		WHERE 1=1
			AND T1.GUBUN = #{gubun }
			AND T1.CODE_NM = #{searchCode }
	</select>
	
	<select id="selectManageList" parameterType="map" resultType="map">
		SELECT 
			T2.INSTT_CODE AS insttCode
			, T2.INSTT_NM AS insttNm
			, T1.USER_ID AS userId
			, T1.USER_NM AS userNm
			, T1.CHRG_DEPT AS chrgDept
			, DATE_FORMAT(T1.RECENT_CONECT_DT, '%Y-%m-%d') AS recentConnectDt
			, T1.RM AS rm
			, IF(T1.USE_AT = true, 'Y', 'N') AS useAt
			, T3.AUTHOR_CODE AS authorCode
		    , T1.RNUM
		FROM 
			( 
			SELECT
				USER_ID, INSTT_CODE, USER_NM, CHRG_DEPT, RECENT_CONECT_DT,
				RM, USE_AT, @rownum := @rownum+1 AS RNUM
			FROM 
				USER,
				(SELECT @rownum :=0) AS R
			WHERE 1=1
			ORDER BY RECENT_CONECT_DT ASC
			) T1 
			LEFT OUTER JOIN INSTT_MANAGE T2 ON T1.INSTT_CODE = T2.INSTT_CODE
			LEFT OUTER JOIN USER T3 ON T1.USER_ID = T3.USER_ID
		WHERE 1=1
		
		ORDER BY RNUM
	</select>
	
	<update id="updateManageInfo" parameterType="map">
		UPDATE USER SET
			CHRG_DEPT = #{chrgDept } 
			, USER_NM = #{userNm }
			, USE_AT = IF(#{useAt } = 'Y', 1, 0)
		WHERE 1=1
			AND USER_ID = #{userId }
	</update>
	
	<update id="updateManageInsttInfo" parameterType="map">
		UPDATE INSTT SET
			BSNS_BGNDE = #{bsnsBgnde } 
			, BSNS_ENDDE = #{bsnsEndde }
			, REPRSNT_TLPHON = #{reprsntTlphon }
			, HMPG = #{hmpg }
			, CHARGER_NM  = #{chargerNm }
			, CHARGER_EMAIL = #{chargerEmail } 
			, CHARGER_TELNO = #{chargerTelno }
			, CHARGER_MBTLNUM = #{chargerMbtlnum }
		WHERE 1=1
			AND INSTT_CODE = #{insttCode }
	</update>
	
	<select id="selectUserAuthList" parameterType="map" resultType="map">
		SELECT
			T2.CMMN_CODE AS authorCode
		    , T2.CMMN_CODE_NM AS authorCodeNm
		FROM CMMN_CODE T1, CMMN_CODE_DETAIL T2
		WHERE 1=1
			AND T1.GROUP_CODE = T2.GROUP_CODE
			AND T2.GROUP_CODE = 'DQ_AUTHOR_CODE'
	</select>
	
	<select id="selectUserAuthMenuList" parameterType="map" resultType="map">
		SELECT
			T3.MENU_SN AS authMenuSn
			, T2.MENU_SN AS menuSn
			, T2.INQIRE_ORDR AS inqireOrdr
			, T2.UPPER_MENU_SN AS upperMenuSn
			, (SELECT MENU_NM FROM MENU_MANAGE T1 WHERE 1=1 AND T1.MENU_SN = (SELECT UPPER_MENU_SN FROM MENU_MANAGE T0 WHERE T0.MENU_SN = T2.MENU_SN)) AS upperMenuNm
			, T2.MENU_DP_NO AS menuDp
			, T2.MENU_NM AS menuNm
			, IF( (SELECT COUNT(*) FROM MENU_MANAGE T0 WHERE T0.USE_AT = 1 AND T0.UPPER_MENU_SN = T2.MENU_SN) = 0, 'Y', 'N') AS isLast
			, IF(T2.USE_AT = true, 'Y', 'N') AS useAt
			, T1.MENU_GROUP_SN AS menuGroupSn
			, T1.MENU_GROUP_NM AS menuGroupNm
			, IF(T3.USE_AT = true, 'Y', 'N') AS authAt
		FROM 
			MENU_GROUP T1 
			LEFT OUTER JOIN MENU_MANAGE T2 ON T1.MENU_GROUP_SN = T2.MENU_GROUP_SN AND T2.USE_AT = 1
		    LEFT JOIN MENU_AUTHOR T3 ON T2.MENU_SN = T3.MENU_SN AND T3.AUTHOR_CODE = #{authCode }
		WHERE 1=1
			
		ORDER BY CAST(T1.MENU_GROUP_SN AS UNSIGNED), CAST(T2.MENU_DP_NO AS UNSIGNED), CAST(T2.INQIRE_ORDR AS UNSIGNED)
	</select>
	
	<update id="updateMenuAuthList" parameterType="map">
		UPDATE MENU_AUTHOR SET
			USE_AT = IF(#{useAt } = 'Y', 1, 0)
		WHERE 1=1
			AND MENU_SN = #{menuSn }
			AND AUTHOR_CODE = #{authCode }
	</update>
	
	<insert id="insertMenuAuthList" parameterType="map" > 
		INSERT INTO MENU_AUTHOR
		(
			MENU_SN, AUTHOR_CODE, USE_AT
		)
		SELECT 
			#{menuSn} , AUTHOR_CODE, 1
		FROM MENU_AUTHOR
		WHERE 1=1
		GROUP BY AUTHOR_CODE
	</insert>
	
	<delete id="deleteAuthor" parameterType="map">
		DELETE FROM MENU_AUTHOR WHERE 1=1
		AND MENU_SN = #{selectTreeNode }
	</delete>
	
</mapper>